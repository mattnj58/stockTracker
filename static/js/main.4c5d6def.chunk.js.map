{"version":3,"sources":["app_components/portfolio.component.jsx","app_components/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Component","require","config","App","state","ticker","redirect","event","this","setState","target","value","preventDefault","console","log","context","router","history","push","className","Navbar","variant","style","backgroundColor","margin","width","Brand","NavLink","to","color","fontSize","Button","onClick","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","rel","href","integrity","crossOrigin","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0WAMwBA,Y,wBCEHA,YCIrBC,EAAQ,IAAUC,S,IA4DHC,E,4MAxDbC,MAAQ,CACNC,OAAO,GACPC,SAAS,M,2DAGEC,GACXC,KAAKC,SAAS,CAACJ,OAAQE,EAAMG,OAAOC,U,mCAGzBJ,GACXA,EAAMK,iBACNC,QAAQC,IAAIN,KAAKJ,MAAMC,QAEvBG,KAAKO,QAAQC,OAAOC,QAAQC,KAAK,a,kCAGvBX,GACVC,KAAKJ,MAAMa,QAAQC,KAAK,0B,+BAIxB,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAY,OASf,kBAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOC,MAAO,CAACC,gBAAgB,UAAWC,OAAO,OAAQC,MAAM,SAC3E,kBAACL,EAAA,EAAOM,MAAR,KACE,kBAACC,EAAA,EAAD,CAASC,GAAG,gBAAgBN,MAAO,CAACO,MAAM,QAASC,SAAS,SAA5D,iBAYJ,kBAACC,EAAA,EAAD,CAAQC,QAASxB,KAAKyB,aAAtB,iB,GAhDMjC,aCFEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,0BACFC,IAAI,aACJC,KAAK,wEACLC,UAAU,0EACVC,YAAY,cAEV,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.4c5d6def.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport CardDeck from 'react-bootstrap/CardDeck';\r\nimport './portfolio.css'\r\nconst stocksURL = 'wss://ws.finnhub.io?token=bs3tkvnrh5rbsfggfo6g';\r\n\r\nclass Portfolio extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            symbols: ['MSFT','TSLA', 'AAPL'],\r\n            msftPrices:['N/A'],\r\n            msftChange:[0],\r\n            msftPct:[0],\r\n            tslaPrices: ['N/A'],\r\n            tslaChange:[0],\r\n            tslaPct:[0],\r\n            aaplPrices:['N/A'],\r\n            aaplChange:[0],\r\n            aaplPct:[0]\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.connection = new WebSocket(stocksURL);\r\n        var sym=\"\";\r\n        var p=0;\r\n\r\n        this.connection.onmessage = evt => {\r\n            var packet = JSON.parse(evt.data);\r\n            if(packet.type === \"trade\"){\r\n                sym = packet.data[0].s;\r\n                p = packet.data[0].p.toFixed(2);\r\n                if(sym===\"MSFT\"){\r\n                    this.setState({\r\n                        msftPrices: p,\r\n                        msftChange: this.diff(p,210.15),\r\n                        msftPct: this.pctChange(p,210)\r\n                    })\r\n                } else if(sym===\"TSLA\"){\r\n                    this.setState({\r\n                        tslaPrices: p,\r\n                        tslaChange: this.diff(p,1280.22),\r\n                        tslaPct: this.pctChange(p,1280.22)\r\n                    })\r\n                } else if(sym==='AAPL'){\r\n                    this.setState({\r\n                        aaplPrices: p,\r\n                        aaplChange: this.diff(p,442.56),\r\n                        aaplPct: this.pctChange(p,442.56)\r\n                    })\r\n                } else {\r\n                    console.log(packet);\r\n                }\r\n            }\r\n        };\r\n\r\n        setInterval( _ => {\r\n            if(!this.isOpen(this.connection)) return;\r\n            for(var i=0; i<this.state.symbols.length; i++){\r\n                this.connection.send(JSON.stringify({'type':'subscribe', 'symbol':this.state.symbols[i]}))\r\n            }\r\n        },1000)\r\n    }\r\n\r\n    componentWillUnmount = () =>{\r\n        this.connection.close();\r\n    }\r\n\r\n    isOpen(ws){\r\n        return ws.readyState === ws.OPEN\r\n    }\r\n\r\n    diff(price, ogPrice){\r\n        \r\n        return (price-ogPrice).toFixed(2);\r\n    }\r\n\r\n    pctChange(price, ogPrice){\r\n        return ((100*((price-ogPrice)/ogPrice)).toFixed(2));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                {/* <ul>{ this.state.messages.slice(-1).map( (msg, idx) => <li key={'msg-' + idx }>{ msg }</li> )}</ul> */}\r\n                <CardDeck className='m-3'>\r\n                    <Card text={'black'} style={{backgroundColor: '#00c853'}} className='stockCard'>\r\n                        <Card.Title style={{fontSize:'90px'}}>{this.state.symbols[0]}</Card.Title>\r\n                        <Card.Subtitle style={{fontSize:'40px'}}>Price bought at: $210.15</Card.Subtitle>\r\n                        <Card.Text style={{fontSize: '40px'}}>Currently Traded Price</Card.Text>\r\n                        <Card.Text style={{fontSize: '100px'}}>${this.state.msftPrices}</Card.Text>\r\n                        <Card.Text style={{fontSize: '40px'}}>Total Gain/Loss Per Share</Card.Text>\r\n                        <Card.Text style={{fontSize: '100px'}}>${this.state.msftChange}</Card.Text>\r\n                        <Card.Text style={{fontSize: '100px'}}>{this.state.msftPct}&#37;</Card.Text>\r\n                    </Card>\r\n                    <Card text={'black'} style={{backgroundColor:'#78ff82'}} className='stockCard'>\r\n                        <Card.Title style={{fontSize: '90px'}}>{this.state.symbols[1]}</Card.Title>\r\n                        <Card.Subtitle style={{fontSize:'40px'}}>Price bought at: $1280.22</Card.Subtitle>\r\n                        <Card.Text style={{fontSize: '40px'}}>Currently Traded Price</Card.Text>\r\n                        <Card.Text style={{fontSize: '100px'}}>${this.state.tslaPrices}</Card.Text>\r\n                        <Card.Text style={{fontSize: '40px'}}>Total Gain/Loss Per Share</Card.Text>\r\n                        <Card.Text style={{fontSize: '100px'}}>${this.state.tslaChange}</Card.Text>\r\n                        <Card.Text style={{fontSize: '100px'}}>{this.state.tslaPct}&#37;</Card.Text>\r\n                    </Card>\r\n                    <Card text={'black'} style={{backgroundColor:'#78ffaa'}} className='stockCard'>\r\n                        <Card.Title style={{fontSize: '90px'}}>{this.state.symbols[2]}</Card.Title>\r\n                        <Card.Subtitle style={{fontSize:'40px'}}>Price bought at: $442.56</Card.Subtitle>\r\n                        <Card.Text style={{fontSize: '40px'}}>Currently Traded Price</Card.Text>\r\n                        <Card.Text style={{fontSize:'100px'}}>${this.state.aaplPrices}</Card.Text>\r\n                        <Card.Text style={{fontSize: '40px'}}>Total Gain/Loss Per Share</Card.Text>\r\n                        <Card.Text style={{fontSize: '100px'}}>${this.state.aaplChange}</Card.Text>\r\n                        <Card.Text style={{fontSize: '100px'}}>{this.state.aaplPct}&#37;</Card.Text>\r\n                    </Card>\r\n                </CardDeck>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Portfolio;","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n// import Company from './company.component';\r\nimport { NavLink } from 'react-router-dom';\r\n// import {Link} from 'react-router-dom';\r\n\r\nconst apiBase = 'https://finnhub.io/api/v1/stock/profile2?symbol='\r\n\r\nclass Search extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            ticker:'',\r\n            logo:'',\r\n            companyName:'',\r\n            yearHigh:0\r\n        }\r\n    }\r\n\r\n    getTicker(e){\r\n        this.setState({ticker: e.target.value});\r\n    }\r\n\r\n    search = async(e) => {\r\n        var tick = e.target.value;\r\n        \r\n        // console.log(tick);\r\n\r\n        if(tick){\r\n            const call = await fetch(`${apiBase}${tick}&token=bs3tkvnrh5rbsfggfo6g`);\r\n            if(call.status===200){\r\n                const res = await call.json();\r\n                this.setState({\r\n                    logo: res.logo,\r\n                    companyName: res.name\r\n                });\r\n                console.log(this.state.logo);\r\n                console.log(this.state.companyName);\r\n            } else if(call.status===429){\r\n                alert(\"You have exceeded the free tier limit, please try again later\");\r\n            } else {\r\n                alert(\"Something went wrong, please try again later\");\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div>\r\n            <input type='text' className='m-1' value={this.state.ticker} onChange={(e) => this.getTicker(e)}/>\r\n            <Button onClick={this.search} value={this.state.ticker}>Submit</Button>\r\n            <div>\r\n                <span><img src={this.state.logo} alt='' height='30px' /></span>\r\n                <span><p>{this.state.companyName}</p></span>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link, Switch, withRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport {NavLink} from 'react-bootstrap'\nimport Button from 'react-bootstrap/Button';\n\nimport Portfolio from './app_components/portfolio.component';\nimport Search from './app_components/search.component';\n// import { Form, FormControl } from 'react-bootstrap';\n\nrequire('dotenv').config();\n//import Search from './app_components/search.componenet';\nclass App extends Component {\n\n  state = {\n    ticker:\"\",\n    redirect:null\n  }\n\n  handleChange(event){\n    this.setState({ticker: event.target.value})\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n    console.log(this.state.ticker);\n    // alert(this.state.ticker);\n    this.context.router.history.push('/Submit');\n  }\n\n  handleClick(event){\n    this.state.history.push(\"/stockTracker/Search\");\n  }\n\n  render(){\n    return(\n      <Router>\n        <div className = \"App\">\n          {/* <div className = \"App-header\">\n            <Link to='/'>Dashboard</Link>\n            <Link to='/Search'>Search</Link>\n          </div>\n          <Switch>\n            <Route exact path='/'></Route>\n            <Route exact path='/Search' component={Search}></Route>\n          </Switch> */}\n          <Navbar variant='dark' style={{backgroundColor:'#009624', margin:'auto', width:'auto'}}>\n              <Navbar.Brand>\n                <NavLink to='/stockTracker' style={{color:\"black\", fontSize:\"25px\"}}>Stock Viewer</NavLink>\n              </Navbar.Brand>\n              {/* <form inline onSubmit={this.handleSubmit.bind(this)}>\n                <input type='text' placeholder='Search' className='mr-sm-2' value={this.state.ticker} onChange={this.handleChange.bind(this)}/>\n                <button type='submit'>Submit</button>\n              </form> */}\n            {/* <Link to='/'>Home</Link> */}\n            {/* <Link to='/stockTracker/Search' style={{color:\"black\", fontSize:\"25px\"}}>Search</Link>\n            <Switch>\n              <Route path='/' component={Portfolio}/>\n              <Route path='/stockTracker/Search' component={Search}></Route>\n            </Switch> */}\n            <Button onClick={this.handleClick}>Search</Button>\n            </Navbar>\n          {/* <Portfolio/> */}\n        </div>\n      </Router>\n      );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n  rel=\"stylesheet\"\n  href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n  integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n  crossOrigin=\"anonymous\"\n/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}