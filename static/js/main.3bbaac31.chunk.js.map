{"version":3,"sources":["app_components/portfolio.component.jsx","app_components/search.componenet.jsx","App.js","serviceWorker.js","index.js"],"names":["Portfolio","props","componentDidMount","connection","WebSocket","sym","p","onmessage","evt","packet","JSON","parse","data","type","s","toFixed","setState","msftPrices","state","concat","msftChange","diff","msftPct","pctChange","tslaPrices","tslaChange","tslaPct","setInterval","_","isOpen","send","stringify","symbols","ws","readyState","OPEN","price","ogPrice","CardDeck","Card","text","style","backgroundColor","fontSize","width","margin","height","Title","this","Subtitle","Text","slice","Component","search","e","preventDefault","console","log","Search","require","config","App","ticker","event","target","className","Navbar","variant","Brand","to","color","Form","inline","onSubmit","handleSubmit","FormControl","placeholder","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","rel","href","integrity","crossorigin","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3bbaac31.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport CardDeck from 'react-bootstrap/CardDeck';\r\nconst stocksURL = 'wss://ws.finnhub.io?token=bs3tkvnrh5rbsfggfo6g';\r\n\r\nclass Portfolio extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            symbols: ['MSFT','TSLA'],\r\n            msftPrices:['n/a'],\r\n            msftChange:[0],\r\n            msftPct:[0],\r\n            tslaPrices: ['n/a'],\r\n            tslaChange:[0],\r\n            tslaPct:[0]\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.connection = new WebSocket(stocksURL);\r\n        var sym=\"\";\r\n        var p=0;\r\n\r\n        this.connection.onmessage = evt => {\r\n            var packet = JSON.parse(evt.data);\r\n            if(packet.type === \"trade\"){\r\n                sym = packet.data[0].s;\r\n                p = packet.data[0].p.toFixed(2);\r\n                if(sym===\"MSFT\"){\r\n                    this.setState({\r\n                        msftPrices: this.state.msftPrices.concat(p),\r\n                        msftChange: this.state.msftPrices.concat(this.diff(p,210)),\r\n                        msftPct: this.state.msftPct.concat(this.pctChange(p,210))\r\n                    })\r\n                } else if(sym===\"TSLA\"){\r\n                    this.setState({\r\n                        tslaPrices: this.state.tslaPrices.concat(p),\r\n                        tslaChange: this.state.tslaChange.concat(this.diff(p,1280.22)),\r\n                        tslaPct: this.state.tslaPct.concat(this.pctChange(p,1280.22))\r\n                    })\r\n                }\r\n            }\r\n        };\r\n\r\n        setInterval( _ => {\r\n            if(!this.isOpen(this.connection)) return;\r\n            this.connection.send(JSON.stringify({'type':'subscribe', 'symbol':'TSLA'}))\r\n            this.connection.send (JSON.stringify({'type':'subscribe', 'symbol': 'MSFT'}))\r\n        },1000)\r\n    }\r\n\r\n    isOpen(ws){\r\n        return ws.readyState === ws.OPEN\r\n    }\r\n\r\n    diff(price, ogPrice){\r\n        \r\n        return (price-ogPrice).toFixed(2);\r\n    }\r\n\r\n    pctChange(price, ogPrice){\r\n        return ((100*((price-ogPrice)/ogPrice)).toFixed(2));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                {/* <ul>{ this.state.messages.slice(-1).map( (msg, idx) => <li key={'msg-' + idx }>{ msg }</li> )}</ul> */}\r\n                <CardDeck>\r\n                    <Card text={'black'} style={{backgroundColor: '#00c853',fontSize:'90px', width:'5rem', margin:'3rem', height:'350'}}>\r\n                        <Card.Title style={{fontSize:'90px'}}>{this.state.symbols[0]}</Card.Title>\r\n                        <Card.Subtitle style={{fontSize:'40px'}}>Price bought at: $210.15</Card.Subtitle>\r\n                        <Card.Text>\r\n                            <p style={{fontSize: '40px'}}>Currently Traded Price</p>\r\n                            <p>${this.state.msftPrices.slice(-1)}</p>\r\n                            <p style={{fontSize: '40px'}}>Total Gain/Loss</p>\r\n                            <p>${this.state.msftChange.slice(-1)}</p>\r\n                            <p>{this.state.msftPct.slice(-1)}&#37;</p>\r\n                        </Card.Text>\r\n                    </Card>\r\n                    <Card text={'black'} style={{backgroundColor:'#78ff82', fontSize:'90px', width:'10px', margin:'3rem', height:'350'}}>\r\n                        <Card.Title style={{fontSize: '90px'}}>{this.state.symbols[1]}</Card.Title>\r\n                        <Card.Subtitle style={{fontSize:'40px'}}>Price bought at: $1280.22</Card.Subtitle>\r\n                        <Card.Text>\r\n                            <p style={{fontSize: '30px'}}>Currently Traded Price</p>\r\n                            <p>${this.state.tslaPrices.slice(-1)}</p>\r\n                            <p style={{fontSize: '30px'}}>Total Gain/Loss</p>\r\n                            <p>${this.state.tslaChange.slice(-1)}</p>\r\n                            <p>{this.state.tslaPct.slice(-1)}&#37;</p>\r\n                        </Card.Text>\r\n                    </Card>\r\n                </CardDeck>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Portfolio;","import React, { Component } from 'react';\r\n\r\nconst apiBase = 'https://finnhub.io/api/v1/stock/metric?symbol=AAPL&metric=all&token=bs3tkvnrh5rbsfggfo6g'\r\n\r\nclass Search extends Component{\r\n\r\n    render(){\r\n        return(\r\n        <div>\r\n            <h1>Search</h1>\r\n            \r\n            <form>\r\n                <input type='text' placeholder='Enter a Ticker Symbol' name='ticker'></input>\r\n            </form>\r\n            <button onClick={search}>Add</button>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction search(e) {\r\n    e.preventDefault();\r\n    console.log(\"button has been clicked\");\r\n\r\n    // var ticker = this.ticker;\r\n\r\n    // if(ticker){\r\n    //     const call = fetch(apiBase)\r\n    //     const res = call.json();\r\n    //     if(call.status===200){\r\n    //         console.log(call);\r\n    //         console.log(res);\r\n    //     }\r\n    // }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from 'react-bootstrap/Button';\n\nimport Portfolio from './app_components/portfolio.component';\nimport Search from './app_components/search.componenet';\nimport { InputGroup, Form, FormControl } from 'react-bootstrap';\n// import Dashboard from './app_components/dashboard.component';\n\nrequire('dotenv').config();\n//import Search from './app_components/search.componenet';\n\nclass App extends Component {\n  state = {\n    ticker:\"\"\n  }\n  \n  handleSubmit(event){\n    this.setState({ticker: this.event.target.ticker})\n    console.log(\"this button has been clicked\")\n  }\n\n  render(){\n    return(\n      <Router>\n        <div className = \"App\">\n          {/* <div className = \"App-header\">\n            <Link to='/'>Dashboard</Link>\n            <Link to='/Search'>Search</Link>\n          </div> */}\n          {/* <Switch>\n            <Route exact path='/'></Route>\n            <Route exact path='/Search' component={Search}></Route>\n          </Switch> */}\n          <Navbar variant='dark' style={{backgroundColor:'#009624', margin:'auto', width:'auto'}}>\n              <Navbar.Brand>\n                <Link to='mattnj58.github.io/stockTracker' style={{color:\"black\", fontSize:\"25px\"}}>Stock Viewer</Link>\n              </Navbar.Brand>\n              <Form inline onSubmit={this.handleSubmit}>\n                <FormControl type='text' placeholder='Search' className='mr-sm-2'/>\n                <Button type=\"submit\">Submit</Button>\n              </Form>\n            </Navbar>\n          <Portfolio/>\n        </div>\n      </Router>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n  rel=\"stylesheet\"\n  href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n  integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n  crossorigin=\"anonymous\"\n/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}